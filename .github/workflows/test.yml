name: Cerver Tests

on:
  pull_request:
    branches:
      - '*'

jobs:
  test:
    name: Cerver tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build Docker Image
        run: docker build -t ermiry/cerver:test -f Dockerfile.test .

      - name: Compile Sources
        run: make TYPE=test COVERAGE=1

      - name: Compile Tests
        run: make TYPE=test COVERAGE=1 test

      - name: Unit Tests
        run: bash test/run.sh

      - name: Ping Integration Test
        run: |
          docker run -d --name test --rm -p 7000:7000 ermiry/cerver:test ./bin/cerver/ping
          sleep 2
          sudo docker inspect test --format='{{.State.ExitCode}}'
          ./test/bin/client/ping
          sudo docker kill $(sudo docker ps -q)

      - name: Packets Integration Test
        run: |
          sudo docker run -d --name test --rm -p 7000:7000 ermiry/cerver:test ./bin/cerver/packets
          sleep 2
          sudo docker inspect test --format='{{.State.ExitCode}}'
          ./test/bin/client/packets
          sudo docker kill $(sudo docker ps -q)

      - name: Requests Integration Test
        run: |
          sudo docker run -d --name test --rm -p 7000:7000 ermiry/cerver:test ./bin/cerver/requests
          sleep 2
          sudo docker inspect test --format='{{.State.ExitCode}}'
          ./test/bin/client/requests
          sudo docker kill $(sudo docker ps -q)

      - name: Auth Integration Test
        run: |
          sudo docker run -d --name test --rm -p 7000:7000 ermiry/cerver:test ./bin/cerver/auth
          sleep 2
          sudo docker inspect test --format='{{.State.ExitCode}}'
          ./test/bin/client/auth
          sudo docker kill $(sudo docker ps -q)

      - name: Sessions Integration Test
        run: |
          sudo docker run -d --name test --rm -p 7000:7000 ermiry/cerver:test ./bin/cerver/sessions
          sleep 2
          sudo docker inspect test --format='{{.State.ExitCode}}'
          ./test/bin/client/sessions
          sudo docker kill $(sudo docker ps -q)

      - name: Threads Integration Test
        run: |
          sudo docker run -d --name test --rm -p 7000:7000 ermiry/cerver:test ./bin/cerver/threads
          sleep 2
          sudo docker inspect test --format='{{.State.ExitCode}}'
          ./test/bin/client/threads
          sudo docker kill $(sudo docker ps -q)

      - name: Queue Integration Test
        run: |
          sudo docker run -d --name test --rm -p 7000:7000 ermiry/cerver:test ./bin/cerver/queue
          sleep 2
          sudo docker inspect test --format='{{.State.ExitCode}}'
          ./test/bin/client/queue
          sudo docker kill $(sudo docker ps -q)

      - name: Load Round Robin Integration Test
        run: |
          sudo docker network create cerver || { exit 1; }
          sudo docker run -d --name service-1 --rm -p 7001:7001 --net cerver ermiry/cerver:test ./bin/cerver/service -p 7001
          sudo docker run -d --name service-2 --rm -p 7002:7002 --net cerver ermiry/cerver:test ./bin/cerver/service -p 7002
          sudo docker run -d --name load --rm -p 7000:7000 --net cerver ermiry/cerver:local ./bin/cerver/load --type round_robin
          sleep 2
          sudo docker inspect load --format='{{.State.ExitCode}}' || { exit 1; }
          sudo docker inspect service-1 --format='{{.State.ExitCode}}' || { exit 1; }
          sudo docker inspect service-2 --format='{{.State.ExitCode}}' || { exit 1; }
          ./test/bin/client/load/simple || { exit 1; }
          sudo docker kill $(sudo docker ps -q)

      - name: Load Handler ID Integration Test
        run: |
          sudo docker run -d --name service-1 --rm -p 7001:7001 --net cerver ermiry/cerver:test ./bin/cerver/service -p 7001
          sudo docker run -d --name service-2 --rm -p 7002:7002 --net cerver ermiry/cerver:test ./bin/cerver/service -p 7002
          sudo docker run -d --name load --rm -p 7000:7000 --net cerver ermiry/cerver:local ./bin/cerver/load --type handler_id
          sleep 2
          sudo docker inspect load --format='{{.State.ExitCode}}' || { exit 1; }
          sudo docker inspect service-1 --format='{{.State.ExitCode}}' || { exit 1; }
          sudo docker inspect service-2 --format='{{.State.ExitCode}}' || { exit 1; }
          ./test/bin/client/load/id || { exit 1; }
          sudo docker kill $(sudo docker ps -q)

      - name: Coverage
        run: make coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage/
          flags: unittests
          name: build
          fail_ci_if_error: true
          # verbose: true
